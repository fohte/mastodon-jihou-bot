// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mock_main/mock_service.go
//

// Package mock_main is a generated GoMock package.
package mock_main

import (
	context "context"
	reflect "reflect"

	mastodon "github.com/mattn/go-mastodon"
	gomock "go.uber.org/mock/gomock"
)

// MockMastodonService is a mock of MastodonService interface.
type MockMastodonService struct {
	ctrl     *gomock.Controller
	recorder *MockMastodonServiceMockRecorder
	isgomock struct{}
}

// MockMastodonServiceMockRecorder is the mock recorder for MockMastodonService.
type MockMastodonServiceMockRecorder struct {
	mock *MockMastodonService
}

// NewMockMastodonService creates a new mock instance.
func NewMockMastodonService(ctrl *gomock.Controller) *MockMastodonService {
	mock := &MockMastodonService{ctrl: ctrl}
	mock.recorder = &MockMastodonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMastodonService) EXPECT() *MockMastodonServiceMockRecorder {
	return m.recorder
}

// PostStatus mocks base method.
func (m *MockMastodonService) PostStatus(ctx context.Context, toot *mastodon.Toot) (*mastodon.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostStatus", ctx, toot)
	ret0, _ := ret[0].(*mastodon.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostStatus indicates an expected call of PostStatus.
func (mr *MockMastodonServiceMockRecorder) PostStatus(ctx, toot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostStatus", reflect.TypeOf((*MockMastodonService)(nil).PostStatus), ctx, toot)
}
